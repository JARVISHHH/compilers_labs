lno@0	@0	program	children: [@1 @7 @27 ]	

lno@2	@1	statement	children: [@2 @3 ]	decl	
lno@2	@2	type	type: int	
lno@2	@3	list	children: [@4 ]	
lno@2	@4	initiation	children: [@5 @6 ]	
lno@2	@5	variable	varname: s	
lno@2	@6	const	type: int	value: 0	

lno@3	@7	function	children: [@8 @9 @10 @15 ]	
lno@3	@8	type	type: int	
lno@3	@9	variable	varname: f	
lno@3	@10	list	children: [@11 @13 ]	
lno@3	@11	type	type: int	children: [@12 ]	
lno@3	@12	variable	varname: x	
lno@3	@13	type	type: int	children: [@14 ]	
lno@3	@14	variable	varname: y	

lno@4	@15	list	children: [@16 @25 ]	
lno@4	@16	statement	op: +=	children: [@17 @18 ]	assign	
lno@4	@17	variable	varname: s	
lno@4	@18	expression	op: +	children: [@19 @22 ]	
lno@4	@19	expression	op: *	children: [@20 @21 ]	
lno@4	@20	variable	varname: x	
lno@4	@21	variable	varname: x	
lno@4	@22	expression	op: *	children: [@23 @24 ]	
lno@4	@23	variable	varname: y	
lno@4	@24	variable	varname: y	

lno@5	@25	statement	children: [@26 ]	skip	
lno@5	@26	variable	varname: s	

lno@7	@27	function	children: [@28 @29 @30 ]	
lno@7	@28	type	type: void	
lno@7	@29	variable	varname: main	

lno@8	@30	list	children: [@31 @37 @46 @50 @54 @61 ]	
lno@8	@31	statement	children: [@32 @33 ]	decl	
lno@8	@32	type	type: int	
lno@8	@33	list	children: [@34 ]	
lno@8	@34	initiation	children: [@35 @36 ]	
lno@8	@35	variable	varname: i	
lno@8	@36	const	type: int	value: 0	

lno@9	@37	statement	children: [@38 @39 ]	decl	
lno@9	@38	type	type: int	
lno@9	@39	list	children: [@40 @43 ]	
lno@9	@40	initiation	children: [@41 @42 ]	
lno@9	@41	variable	varname: a	
lno@9	@42	const	type: int	value: 1	
lno@9	@43	initiation	children: [@44 @45 ]	
lno@9	@44	variable	varname: b	
lno@9	@45	const	type: int	value: 1	

lno@10	@46	statement	children: [@47 @48 ]	decl	
lno@10	@47	type	type: int	
lno@10	@48	list	children: [@49 ]	
lno@10	@49	variable	varname: line	

lno@11	@50	statement	children: [@51 @52 ]	scanf	
lno@11	@51	const	type: string	value: "%d"	
lno@11	@52	list	children: [@53 ]	
lno@11	@53	variable	varname: line	

lno@12	@54	statement	children: [@55 @58 ]	if	
lno@12	@55	expression	op: >	children: [@56 @57 ]	
lno@12	@56	variable	varname: line	
lno@12	@57	const	type: int	value: 10000	
lno@12	@58	statement	op: =	children: [@59 @60 ]	assign	
lno@12	@59	variable	varname: line	
lno@12	@60	const	type: int	value: 10000	

lno@13	@61	statement	children: [@62 @63 ]	while	
lno@13	@62	const	type: bool	value: 1	

lno@14	@63	list	children: [@64 @78 ]	
lno@14	@64	statement	children: [@65 @73 ]	if	
lno@14	@65	expression	op: <	children: [@66 @72 ]	
lno@14	@66	function	children: [@67 ]	
lno@14	@67	list	children: [@68 @70 ]	
lno@14	@68	expression	op: ++	children: [@69 ]	
lno@14	@69	variable	varname: a	
lno@14	@70	expression	op: ++	children: [@71 ]	
lno@14	@71	variable	varname: b	
lno@14	@72	variable	varname: line	

lno@15	@73	list	children: [@74 ]	
lno@15	@74	statement	children: [@75 @76 ]	prinf	
lno@15	@75	const	type: string	value: "sum is: %d\n"	
lno@15	@76	list	children: [@77 ]	
lno@15	@77	variable	varname: s	

lno@16	@78	statement	children: [@79 @83 ]	else	

lno@17	@79	statement	children: [@80 @81 ]	prinf	
lno@17	@80	const	type: string	value: "result is:%d\n"	
lno@17	@81	list	children: [@82 ]	
lno@17	@82	variable	varname: s	

lno@18	@83	variable	varname: break	
