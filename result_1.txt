lno@0	@0	program	children: [@1 ]	

lno@2	@1	function	children: [@2 @3 @4 ]	
lno@2	@2	type	type: void	
lno@2	@3	function name	varname: main	

lno@3	@4	list	children: [@5 @10 @13 @16 @20 @25 ]	
lno@3	@5	statement	children: [@6 @7 ]	decl	
lno@3	@6	type	type: int	
lno@3	@7	list	children: [@8 @9 ]	
lno@3	@8	variable	varname: a	
lno@3	@9	variable	varname: s	

lno@4	@10	statement	op: =	children: [@11 @12 ]	assign	
lno@4	@11	variable	varname: a	value: 10	
lno@4	@12	const	type: int	value: 10	

lno@5	@13	statement	op: =	children: [@14 @15 ]	assign	
lno@5	@14	variable	varname: s	value: 0	
lno@5	@15	const	type: int	value: 0	

lno@6	@16	statement	children: [@17 @18 ]	decl	
lno@6	@17	type	type: char	
lno@6	@18	list	children: [@19 ]	
lno@6	@19	variable	varname: ch	

lno@7	@20	statement	children: [@21 @22 ]	scanf	
lno@7	@21	const	type: string	value: "%d"	
lno@7	@22	list	children: [@23 ]	
lno@7	@23	expression	op: &	children: [@24 ]	
lno@7	@24	variable	varname: ch	

lno@8	@25	statement	children: [@26 @44 ]	while	
lno@8	@26	expression	op: ||	children: [@27 @34 ]	
lno@8	@27	expression	op: &&	children: [@28 @31 ]	
lno@8	@28	expression	op: >	children: [@29 @30 ]	
lno@8	@29	variable	varname: a	value: 10	
lno@8	@30	const	type: int	value: 0	
lno@8	@31	expression	op: <=	children: [@32 @33 ]	
lno@8	@32	variable	varname: a	value: 10	
lno@8	@33	const	type: int	value: 10	
lno@8	@34	expression	op: &&	children: [@35 @40 ]	
lno@8	@35	expression	op: ==	children: [@36 @39 ]	
lno@8	@36	expression	op: %	children: [@37 @38 ]	
lno@8	@37	variable	varname: a	value: 10	
lno@8	@38	const	type: int	value: 100	
lno@8	@39	const	type: int	value: 10	
lno@8	@40	expression	op: ==	children: [@41 @43 ]	
lno@8	@41	expression	op: !	children: [@42 ]	
lno@8	@42	variable	varname: a	value: 10	
lno@8	@43	const	type: int	value: 10	

lno@9	@44	list	children: [@45 @48 @52 @55 @58 ]	
lno@9	@45	statement	op: -=	children: [@46 @47 ]	assign	
lno@9	@46	variable	varname: a	value: 9	
lno@9	@47	const	type: int	value: 1	

lno@10	@48	statement	children: [@49 @50 ]	decl	
lno@10	@49	type	type: int	
lno@10	@50	list	children: [@51 ]	
lno@10	@51	variable	varname: a	

lno@11	@52	statement	op: =	children: [@53 @54 ]	assign	
lno@11	@53	variable	varname: a	value: 10	
lno@11	@54	const	type: int	value: 10	

lno@12	@55	statement	op: +=	children: [@56 @57 ]	assign	
lno@12	@56	variable	varname: s	value: 10	
lno@12	@57	variable	varname: a	value: 10	

lno@13	@58	statement	children: [@59 @64 ]	if	
lno@13	@59	expression	op: <	children: [@60 @62 ]	
lno@13	@60	expression	op: -	children: [@61 ]	
lno@13	@61	variable	varname: s	value: 10	
lno@13	@62	expression	op: -	children: [@63 ]	
lno@13	@63	const	type: int	value: 10	

lno@14	@64	list	children: [@65 @69 @73 @76 ]	
lno@14	@65	statement	children: [@66 @67 ]	prinf	
lno@14	@66	const	type: string	value: "result is: %d\n"	
lno@14	@67	list	children: [@68 ]	
lno@14	@68	variable	varname: s	value: 10	

lno@15	@69	statement	children: [@70 @71 ]	decl	
lno@15	@70	type	type: int	
lno@15	@71	list	children: [@72 ]	
lno@15	@72	variable	varname: b	

lno@16	@73	statement	op: =	children: [@74 @75 ]	assign	
lno@16	@74	variable	varname: b	value: 10	
lno@16	@75	const	type: int	value: 10	

lno@17	@76	statement	children: [@77 @83 @86 @88 ]	for	
lno@17	@77	statement	children: [@78 @79 ]	decl	
lno@17	@78	type	type: int	
lno@17	@79	list	children: [@80 ]	
lno@17	@80	initiation	children: [@81 @82 ]	
lno@17	@81	variable	varname: i	value: 0	
lno@17	@82	const	type: int	value: 0	
lno@17	@83	expression	op: <	children: [@84 @85 ]	
lno@17	@84	variable	varname: i	value: 0	
lno@17	@85	variable	varname: b	value: 10	
lno@17	@86	expression	op: ++	children: [@87 ]	
lno@17	@87	variable	varname: i	value: 0	

lno@18	@88	list	children: [@89 ]	
lno@18	@89	statement	children: [@90 @91 ]	prinf	
lno@18	@90	const	type: string	value: "Have fun: %d\n"	
lno@18	@91	list	children: [@92 ]	
lno@18	@92	variable	varname: b	value: 10	
