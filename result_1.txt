lno@0	@0	program	children: [@1 ]	

lno@2	@1	function	children: [@2 @3 @4 @8 @11 @14 @17 @20 ]	
lno@2	@2	type	type: void	
lno@2	@3	variable	varname: main	

lno@3	@4	statement	children: [@5 @6 @7 ]	decl	
lno@3	@5	type	type: int	
lno@3	@6	variable	varname: a	
lno@3	@7	variable	varname: s	

lno@4	@8	statement	children: [@9 @10 ]	assign	
lno@4	@9	variable	varname: a	
lno@4	@10	const	type: int	

lno@5	@11	statement	children: [@12 @13 ]	assign	
lno@5	@12	variable	varname: s	
lno@5	@13	const	type: int	

lno@6	@14	statement	children: [@15 @16 ]	decl	
lno@6	@15	type	type: char	
lno@6	@16	variable	varname: ch	

lno@7	@17	statement	children: [@18 @19 ]	scanf	
lno@7	@18	const	type: string	
lno@7	@19	variable	varname: ch	

lno@8	@20	statement	children: [@21 @38 @41 @44 @47 @50 ]	while	
lno@8	@21	expression	children: [@22 @37 ]	
lno@8	@22	expression	children: [@23 @34 ]	
lno@8	@23	expression	children: [@24 @29 ]	
lno@8	@24	expression	children: [@25 @26 ]	
lno@8	@25	variable	varname: a	
lno@8	@26	expression	children: [@27 @28 ]	
lno@8	@27	const	type: int	
lno@8	@28	variable	varname: a	
lno@8	@29	expression	children: [@30 @33 ]	
lno@8	@30	expression	children: [@31 @32 ]	
lno@8	@31	const	type: int	
lno@8	@32	variable	varname: a	
lno@8	@33	const	type: int	
lno@8	@34	expression	children: [@35 @36 ]	
lno@8	@35	const	type: int	
lno@8	@36	variable	varname: a	
lno@8	@37	const	type: int	

lno@9	@38	statement	children: [@39 @40 ]	assign	
lno@9	@39	variable	varname: a	
lno@9	@40	const	type: int	

lno@10	@41	statement	children: [@42 @43 ]	decl	
lno@10	@42	type	type: int	
lno@10	@43	variable	varname: a	

lno@11	@44	statement	children: [@45 @46 ]	assign	
lno@11	@45	variable	varname: a	
lno@11	@46	const	type: int	

lno@12	@47	statement	children: [@48 @49 ]	assign	
lno@12	@48	variable	varname: s	
lno@12	@49	variable	varname: a	

lno@13	@50	statement	children: [@51 @54 @57 @60 @63 ]	if	
lno@13	@51	expression	children: [@52 @53 ]	
lno@13	@52	variable	varname: s	
lno@13	@53	const	type: int	

lno@14	@54	statement	children: [@55 @56 ]	prinf	
lno@14	@55	const	type: string	
lno@14	@56	variable	varname: s	

lno@15	@57	statement	children: [@58 @59 ]	decl	
lno@15	@58	type	type: int	
lno@15	@59	variable	varname: b	

lno@16	@60	statement	children: [@61 @62 ]	assign	
lno@16	@61	variable	varname: b	
lno@16	@62	const	type: int	

lno@17	@63	statement	children: [@64 @69 @72 @73 ]	nonetype	
lno@17	@64	statement	children: [@65 @66 ]	decl	
lno@17	@65	type	type: int	
lno@17	@66	initiation	children: [@67 @68 ]	
lno@17	@67	variable	varname: i	
lno@17	@68	const	type: int	
lno@17	@69	expression	children: [@70 @71 ]	
lno@17	@70	variable	varname: i	
lno@17	@71	variable	varname: b	
lno@17	@72	variable	varname: i	

lno@18	@73	statement	children: [@74 @75 ]	prinf	
lno@18	@74	const	type: string	
lno@18	@75	variable	varname: i	
