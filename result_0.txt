lno@0	@0	program	children: [@1 @7 @13 @35 ]	

lno@1	@1	statement	children: [@2 @3 ]	decl	
lno@1	@2	type	type: int	
lno@1	@3	list	children: [@4 ]	
lno@1	@4	initiation	children: [@5 @6 ]	
lno@1	@5	variable	varname: a	value: 0	
lno@1	@6	const	type: int	value: 0	

lno@2	@7	statement	children: [@8 @9 ]	decl	
lno@2	@8	type	type: int	
lno@2	@9	list	children: [@10 ]	
lno@2	@10	initiation	children: [@11 @12 ]	
lno@2	@11	variable	varname: b	value: 2	
lno@2	@12	const	type: int	value: 2	

lno@3	@13	statement	children: [@14 @18 ]	if	
lno@3	@14	expression	op: ==	children: [@15 @17 ]	
lno@3	@15	expression	op: !	children: [@16 ]	
lno@3	@16	const	type: int	value: 2	
lno@3	@17	const	type: int	value: 3	

lno@4	@18	list	children: [@19 @25 @30 ]	
lno@4	@19	statement	children: [@20 @21 ]	decl	
lno@4	@20	type	type: int	
lno@4	@21	list	children: [@22 ]	
lno@4	@22	initiation	children: [@23 @24 ]	
lno@4	@23	variable	varname: a	value: 2	
lno@4	@24	const	type: int	value: 2	

lno@5	@25	statement	op: =	children: [@26 @27 ]	assign	
lno@5	@26	variable	varname: a	value: 4	
lno@5	@27	expression	op: +	children: [@28 @29 ]	
lno@5	@28	variable	varname: a	value: 2	
lno@5	@29	const	type: int	value: 2	

lno@6	@30	statement	op: =	children: [@31 @32 ]	assign	
lno@6	@31	variable	varname: a	value: 7	
lno@6	@32	expression	op: +	children: [@33 @34 ]	
lno@6	@33	variable	varname: a	value: 4	
lno@6	@34	const	type: int	value: 3	

lno@8	@35	statement	children: [@36 @39 ]	while	
lno@8	@36	expression	op: ==	children: [@37 @38 ]	
lno@8	@37	variable	varname: a	value: 0	
lno@8	@38	variable	varname: b	value: 2	

lno@9	@39	list	children: [@40 ]	
lno@9	@40	statement	children: [@41 ]	prinf	
lno@9	@41	variable	varname: a	value: 0	
