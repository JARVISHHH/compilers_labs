lno@0	@0	program	children: [@1 @6 @11 @25 ]	

lno@1	@1	statement	children: [@2 @3 ]	decl	
lno@1	@2	type	type: int	
lno@1	@3	initiation	children: [@4 @5 ]	
lno@1	@4	variable	varname: a	
lno@1	@5	const	type: int	

lno@2	@6	statement	children: [@7 @8 ]	decl	
lno@2	@7	type	type: int	
lno@2	@8	initiation	children: [@9 @10 ]	
lno@2	@9	variable	varname: b	
lno@2	@10	const	type: int	

lno@3	@11	statement	children: [@12 @15 @20 ]	if	
lno@3	@12	expression	children: [@13 @14 ]	
lno@3	@13	const	type: int	
lno@3	@14	const	type: int	

lno@4	@15	statement	children: [@16 @17 ]	decl	
lno@4	@16	type	type: int	
lno@4	@17	initiation	children: [@18 @19 ]	
lno@4	@18	variable	varname: a	
lno@4	@19	const	type: int	

lno@5	@20	statement	children: [@21 @22 ]	assign	
lno@5	@21	variable	varname: a	
lno@5	@22	expression	children: [@23 @24 ]	
lno@5	@23	variable	varname: a	
lno@5	@24	const	type: int	

lno@7	@25	statement	children: [@26 @29 ]	while	
lno@7	@26	expression	children: [@27 @28 ]	
lno@7	@27	variable	varname: a	
lno@7	@28	variable	varname: b	

lno@8	@29	statement	children: [@30 ]	prinf	
lno@8	@30	variable	varname: a	
