lno@0	@0	program	children: [@1 @6 @11 @26 ]	

lno@1	@1	statement	children: [@2 @3 ]	decl	
lno@1	@2	type	type: int	
lno@1	@3	initiation	children: [@4 @5 ]	
lno@1	@4	variable	varname: a	
lno@1	@5	const	type: int	value: 0	

lno@2	@6	statement	children: [@7 @8 ]	decl	
lno@2	@7	type	type: int	
lno@2	@8	initiation	children: [@9 @10 ]	
lno@2	@9	variable	varname: b	
lno@2	@10	const	type: int	value: 2	

lno@3	@11	statement	children: [@12 @16 @21 ]	if	
lno@3	@12	expression	op: ==	children: [@13 @15 ]	
lno@3	@13	expression	op: !	children: [@14 ]	
lno@3	@14	const	type: int	value: 2	
lno@3	@15	const	type: int	value: 3	

lno@4	@16	statement	children: [@17 @18 ]	decl	
lno@4	@17	type	type: int	
lno@4	@18	initiation	children: [@19 @20 ]	
lno@4	@19	variable	varname: a	
lno@4	@20	const	type: int	value: 2	

lno@5	@21	statement	op: =	children: [@22 @23 ]	assign	
lno@5	@22	variable	varname: a	
lno@5	@23	expression	op: +	children: [@24 @25 ]	
lno@5	@24	variable	varname: a	
lno@5	@25	const	type: int	value: 2	

lno@7	@26	statement	children: [@27 @30 ]	while	
lno@7	@27	expression	op: ==	children: [@28 @29 ]	
lno@7	@28	variable	varname: a	
lno@7	@29	variable	varname: b	

lno@8	@30	statement	children: [@31 ]	prinf	
lno@8	@31	variable	varname: a	
